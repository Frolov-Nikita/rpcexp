<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RPCExp</name>
    </assembly>
    <members>
        <member name="T:RPCExp.AlarmLogger.AlarmConfig">
            <summary>
            Alarm configuration. 
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.Condition">
            <summary>
            Condition for message triggering.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.Custom1">
            <summary>
            Value for substitution
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.AlarmInfo">
            <summary>
            Alarm information. Contain message text template, category, facility reference
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.DBandRValue">
            <summary>
            Мертвая зона.
            Предназначена для фильтрации дребезга аварий.
            После срабатывания аварии возврат значения в 0 будет, если условие срабатывания не выполняется и аргументы условия отличаются на эту величину.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.IsOk">
            <summary>
            В порядке ли все составные части аварии.
            True - все участвующие теги прочитаны и доступны (Quality >= 192)
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmConfig.IsRized">
            <summary>
            Determine the front of triggered condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmConfig.From(RPCExp.DbStore.Entities.AlarmCfg,System.Collections.Generic.IEnumerable{RPCExp.Common.TagAbstract},RPCExp.AlarmLogger.Entities.AlarmInfo)">
            <summary>
            Create full AlarmConfig from db entity AlarmCfg
            </summary>
            <param name="alarmCfg">db entity</param>
            <param name="tags"></param>
            <param name="alarmInfo"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.AlarmLogger.Condition">
            <summary>
            Condition for triggering the message.
            It contains operator and its arguments.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.Condition.IsOk">
            <summary>
            В порядке ли аргументы?
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.Condition.Check">
            <summary>
            Выполняется ли условие
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.Condition.InDBand(System.Decimal)">
            <summary>
            Определяет находятся ли аргументы условия внутри мертвой зоны друг друга.
            </summary>
            <param name="dband">величина мертвой зоны</param>
            <returns>true- находятся</returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.Condition.From(System.String,System.Collections.Generic.IEnumerable{RPCExp.Common.TagAbstract})">
            <summary>
            Разбор строки условия и привязка аргументов к тегам (сохраняем ссылку)
            </summary>
            <param name="conditionString">Строка условия</param>
            <param name="tags">Список тегов из которых производится привязка</param>
            <returns>объект условия</returns>
        </member>
        <member name="T:RPCExp.AlarmLogger.Argument">
            <summary>
            Source of the value for the condition. It can be reference for tag, or constant value.
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.Argument.GetValue">
            <summary>
            Gets the value of this argument.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.Argument.From(System.String,System.Collections.Generic.IEnumerable{RPCExp.Common.TagAbstract})">
            <summary>
            Deserialization of argument from string.
            If string contains number, argument will be constant.
            If string contains tag name, argument will be contain the tag reference from tags list.
            If tag doesn't exist in the list the ArgumentException will be thrown.
            </summary>
            <param name="str">name of the tag or number</param>
            <param name="tags">list of tags</param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.AlarmLogger.AlarmService">
            <summary>
            Класс сообщений.
            После запуска начинает периодически проверять кешированые значения тегов на предмет выполнения условия выдачи сообщения. Период проверки: CheckPeriod.
            По фронту сработавшего условия информация о сообщении попадает во временный кеш. После того как данные накопятся в кеше они записываются в БД. Данные также попадут из кеша в БД периодически по периоду SavePeriod.
            Количество записей в БД ограничивается параметром StoreItemsCount. Проверка превышения этого количества происходит периодически с периодом MinMaintainPeriod. 
            Класс также предоставляет методы получения архивных данных.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.MinMaintainPeriod">
            <summary>
            Period for maintain db. Maintain will start when save new messages into db AND this period is elapsed. 
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.CheckPeriod">
            <summary>
            Period for check conditions of alarms.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.SavePeriod">
            <summary>
            Period for saving data into db. Data can be saved faster, if caching buffer is full.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.StoreItemsCount">
            <summary>
            Limit of stored items in DB
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.FileName">
            <summary>
            SQlite db file name
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.Configs">
            <summary>
            Configured messages
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.InnitDB(System.Threading.CancellationToken)">
            <summary>
            db initialization 
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.SaveAsync(System.Collections.Generic.Queue{RPCExp.AlarmLogger.Entities.Alarm},System.Threading.CancellationToken)">
            <summary>
            Save cache into db. And call maintain if maintain period completed.
            </summary>
            <param name="cache"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.ServiceTaskAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.GetInfos">
            <summary>
            Gets information about ALL of configured alarms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.GetCategories">
            <summary>
            Gets available categories.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.GetAlarms(RPCExp.AlarmLogger.AlarmFilter,System.Threading.CancellationToken)">
            <summary>
            Gets stored messages.
            </summary>
            <param name="filter">
            filter is optional. If filter.offset and filter.count doesn't set, then count will be limited by first 20 records.
            </param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.AlarmLogger.AlarmFilter">
            <summary>
            Messages filter
            Every member of this class is optional.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.TBegin">
            <summary>
            Time of the begin selection. Messages before this time will not be selected.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.TEnd">
            <summary>
            Time of the end selection. Messages after this time will not be selected.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.AlarmCategoriesIds">
            <summary>
            List of categories ids. Messages mast have one of this category to be selected.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.InfoIds">
            <summary>
            List of ids of concrete alarms.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.FacilityAccessName">
            <summary>
            Select facility related messages.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.DeviceName">
            <summary>
            Select messages related to device with this name
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.Offset">
            <summary>
            Part of pagination. Sets limit offset for the resulting query.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmFilter.Count">
            <summary>
            Part of pagination. Sets limit count for the resulting query.
            </summary>
        </member>
        <member name="T:RPCExp.Common.DeviceAbstract">
            <summary>
            Base class for a number of protocols implementation
            </summary>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.Name">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.Description">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.BadCommPeriod">
            <summary>
            Amount of ticks to wait then communication issue occurs.
            </summary>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.UpdateInActiveTags">
            <summary>
            if it is true unused tags are updating with period of UpdateInActiveTagsPeriod
            </summary>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.UpdateInActiveTagsPeriod">
            <summary>
            Period for update unused tags
            </summary>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.Groups">
            <summary>
            Groups that includes this tag. TagData is available by group name in GetValues() rpc request. 
            </summary>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.Tags">
            <summary>
            Tags collection
            </summary>
        </member>
        <member name="P:RPCExp.Common.DeviceAbstract.ConnectionSource">
            <summary>
            Reference for getting connection from global connections store.
            </summary>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetPeriodicTagsForUpdate">
            <summary>
            Определяет список тегов требующих чтения сейчас и дату-время следующего обновления
            </summary>
            <returns>Tuple(список тегов, время следующего обновления</returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetTagsGroups">
            <summary>
            Вывод списка групп
            </summary>
            <returns>группа со списком имен тегов входящих в эту группу</returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.ServiceTaskAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.PeriodicUpdate(System.Threading.CancellationToken)">
            <summary>
            Периодическое чтение тегов
            </summary>
            <param name="cancellationToken"></param>
            <returns>Время в которое нужно запустить следующую проверку</returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetGroupInfos(System.String)">
            <summary>
            Получить полное описание группы тегов
            </summary>
            <param name="groupName">Имя группы</param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetGroupValues(System.String)">
            <summary>
            Получает значения группы тегов
            </summary>
            <param name="groupName">Имя группы</param>
            <returns></returns>
            <example>
            { "jsonrpc": "2.0", "method": "f1$Plc1.GetGroupValues", "params": ["usts2"], "id": "159"}
            </example>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetTagsValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Получить значения нескольких тэгов
            </summary>
            <param name="tagNames">имена тэгов</param>
            <returns>значения</returns>
            <example>
            { "jsonrpc": "2.0", "method": "f1$Plc1.GetTagsValues", "params": [["DATA_95"]], "id": "159"}
            </example>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.Read(System.Collections.Generic.ICollection{RPCExp.Common.TagAbstract},System.Threading.CancellationToken)">
            <summary>
            abstract method for read values of collection tags from device by concrete protocol.
            </summary>
            <param name="tags"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.Write(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Запись значений.
            </summary>
            <param name="tagsValues">пара имя тега - значение</param>
            <returns>Кол-во записанных значений. Теги помеченные как "только для чтения" не будут записаны.</returns>
            <example>
            { "jsonrpc": "2.0", "method": "f1$Plc1.Write", "params": [{"UST_112":"-5"}], "id": "159"}
            </example>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.Write(System.Collections.Generic.IDictionary{RPCExp.Common.TagAbstract,System.Object})">
            <summary>
            abstract method to write values in collection tags to device by concrete protocol.
            </summary>
            <param name="tagsValues"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.Common.Facility">
            <summary>
            An automation object. Can contain devices (controllers, plcs, etc.)
            </summary>
        </member>
        <member name="P:RPCExp.Common.Facility.Id">
            <summary>
            Identity
            </summary>
        </member>
        <member name="P:RPCExp.Common.Facility.AccessName">
            <summary>
            Long name which contains the path of the tree automation objects
            </summary>
            <example>
            for example nameSeparator == "$"
            AccessName == "Нефтедобывающая компания$Цех 321$Месторождение 123$Куст 5$Скважина 456А"
            The tree should looks like:
            "Нефтедобывающая компания"
             └ "Цех 321"
                └ "Месторождение 123"
                   └ "Куст 5"
                      └ "Скважина 456А"
            </example>
        </member>
        <member name="P:RPCExp.Common.Facility.Name">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.Facility.Description">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.Facility.Devices">
            <summary>
            Collection of automation devices inside the automation object
            </summary>
        </member>
        <member name="T:RPCExp.Common.Scale">
            <summary>
            Designed to scale numerical values
            </summary>
        </member>
        <member name="P:RPCExp.Common.Scale.Name">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.Scale.Description">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.Scale.DevMin">
            <summary>
            Begin of the Scale inside device (source)
            </summary>
        </member>
        <member name="P:RPCExp.Common.Scale.DevMax">
            <summary>
            End of the Scale inside device (source)
            </summary>
        </member>
        <member name="P:RPCExp.Common.Scale.Min">
            <summary>
            Begin of the Scale inside this server (destination)
            </summary>
        </member>
        <member name="P:RPCExp.Common.Scale.Max">
            <summary>
            End of the Scale inside this server (destination)
            </summary>
        </member>
        <member name="P:RPCExp.Common.Scale.Units">
            <summary>
            Engineering units
            </summary>
        </member>
        <member name="M:RPCExp.Common.Scale.ScaleDevToSrv(System.Object)">
            <summary>
            Scale value from device scale to server scale
            </summary>
            <param name="valueFromDev"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.Scale.ScaleSrvToDev(System.Object)">
            <summary>
            Scale value from server scale to device scale
            </summary>
            <param name="valueFromSrv"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.Common.ServiceState">
            <summary>
            State of the service
            </summary>
        </member>
        <member name="T:RPCExp.Common.ServiceAbstract">
            <summary>
            <para>
            Base class for all services in this project.
            Provide service state. Trace messages when state changing.
            </para>
            Steps to run service:
            <list type="number">
            <item>Create object</item>
            <item>SettingUp created object</item>
            <item>Fire method Start() and service will start starting in separate task:)</item>
            <item>when you need to stop it call method Stop() and service will start stopping</item>
            </list>
            </summary>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.Finalize">
            <summary>
            Stopping service (hard way).
            Disposes all resources.
            Delete this object from memory
            </summary>
        </member>
        <member name="P:RPCExp.Common.ServiceAbstract.State">
            <summary>
            State of the service
            </summary>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.ServiceTaskAsync(System.Threading.CancellationToken)">
            <summary>
            Base method for implementation service logic
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.OnStarting(System.Threading.CancellationToken)">
            <summary>
            This method can be override to make preparation steps before starting
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.OnErrorAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            This method can be override to handle exceptions thrown by service logic in ServiceTaskAsync()
            </summary>
            <param name="exception"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.OnCompleteAsync(System.Threading.CancellationToken)">
            <summary>
            This method can be override to make some logic when service stopped. Save results, cleanup, etc..
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.Start">
            <summary>
            Non blocking method to start starting service in separate task.
            </summary>
        </member>
        <member name="M:RPCExp.Common.ServiceAbstract.Stop">
            <summary>
            Non blocking method to start stopping service normally.
            </summary>
        </member>
        <member name="T:RPCExp.Common.Store">
            <summary>
            Main container for services and resources
            </summary>
        </member>
        <member name="F:RPCExp.Common.Store.nameSeparator">
            <summary>
            Separator to build tree nodes from access names
            </summary>
        </member>
        <member name="P:RPCExp.Common.Store.Facilities">
            <summary>
            HashSet of automation objects, hashed by AccesNames
            </summary>
        </member>
        <member name="P:RPCExp.Common.Store.ConnectionsSources">
            <summary>
            HashSet of connection resources for entire project
            </summary>
        </member>
        <member name="P:RPCExp.Common.Store.TagLogService">
            <summary>
            Tag logging service
            </summary>
        </member>
        <member name="P:RPCExp.Common.Store.AlarmService">
            <summary>
            Alarm(message) logging service
            </summary>
        </member>
        <member name="T:RPCExp.Common.Access">
            <summary>
            
            </summary>
        </member>
        <member name="T:RPCExp.Common.TagAbstract">
            <summary>
            Base class for implementation variables tags for concrete protocol
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Name">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.DisplayName">
            <summary>
            Text to display in frontend
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Description">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Format">
            <summary>
            Format shows how to display value.
            Value should be formated in frontend.
            Value transmit from this app as is.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Access">
            <summary>
            Some tags be with limited access by protocol implementation.
            Some of them - by configuration/
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.ValueType">
            <summary>
            Type of value
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Groups">
            <summary>
            Группы через которые можно опросить тег
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.TemplateId">
            <summary>
            Reference to template contains this tag
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Scale">
            <summary>
            Необязательное масштабирование
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Period">
            <summary>
            Период опроса определяется как минимальный период из групп опроса
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.IsActive">
            <summary>
            Тег активен, если активна хоть одна и групп опроса тэга
            </summary>
        </member>
        <member name="M:RPCExp.Common.TagAbstract.GetInfo">
            <summary>
            Information about this tag
            It should be cached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.TagAbstract.SetValue(System.Object,RPCExp.Common.TagQuality)">
            <summary>
            Sets value received from plc to tag.
            Uses scaling if it needs.
            Updates timestamps.
            </summary>
            <param name="value"></param>
            <param name="qty"></param>
        </member>
        <member name="T:RPCExp.Common.TagData">
            <summary>
            Represents runtime data of the tag.
            It used in json serialization.
            </summary>
        </member>
        <member name="M:RPCExp.Common.TagData.#ctor(RPCExp.Common.TagData)">
            <summary>
            Copying ctor
            </summary>
            <param name="tagData"></param>
        </member>
        <member name="P:RPCExp.Common.TagData.Quality">
            <summary>
            Quality of tag's data
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagData.Last">
            <summary>
            DateTime.Ticks when tags data was updated.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagData.LastGood">
            <summary>
            DateTime.Ticks when tags data was updated by data of good quality.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagData.Value">
            <summary>
            Last updated value
            </summary>
        </member>
        <member name="T:RPCExp.Common.TagQuality">
            <summary>
            Represents standard OPC quality for the tag.
            Good qualities are bigger or equal 0xC0.
            Qualities helps to detect connection problems.
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD">
            <summary>
            Плохое
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_CONFIGURATION_ERROR">
            <summary>
            Ошибка в конфигурации (например не существующий COM порт, или адрес у устройстве)
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_NOT_CONNECTED">
            <summary>
            Ошибка подключения
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_DEVICE_FAILURE">
            <summary>
            Самодиагностика устройства выдает неполадку
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_SENSOR_FAILURE">
            <summary>
            Ошибка датчика
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_LAST_KNOWN_VALUE">
            <summary>
            Ошибка связи, но количество попыток еще не исчерпано и период достоверности значения тоже
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_COMM_FAILURE">
            <summary>
            Ошибка связи
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_OUT_OF_SERVICE">
            <summary>
            Опрос отключен намеренно
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.UNCERTAIN">
            <summary>
            Вероятно не достоверное (из обрывка пакета данных)
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.GOOD">
            <summary>
            хорошее
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.GOOD_LOCAL_OVERRIDE">
            <summary>
            подмененное
            </summary>
        </member>
        <member name="T:RPCExp.Common.TagsGroup">
            <summary>
            Represent group of the tags which infos or data can be requested by single query from frontend.
            This entity doesn't apply to communication with devices.
            It also provide the period of update tags in this group.
            </summary>
        </member>
        <member name="M:RPCExp.Common.TagsGroup.#ctor">
            <summary>
            ctor initialize Group name by new guid value.
            </summary>
        </member>
        <member name="M:RPCExp.Common.TagsGroup.#ctor(RPCExp.Common.IPeriodSource)">
            <summary>
            ctor allows to create Group with custom updatePeriod "calculator"
            </summary>
            <param name="periodSource"></param>
        </member>
        <member name="M:RPCExp.Common.TagsGroup.#ctor(RPCExp.Common.TagsGroup)">
            <summary>
            Копирующий конструктор
            </summary>
            <param name="tagsGroupOriginal"></param>
        </member>
        <member name="P:RPCExp.Common.TagsGroup.Name">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.TagsGroup.Description">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.TagsGroup.IsActive">
            <summary>
            Encapsulates periodSource.IsActive property of updatePeriod "calculator".
            It should be false if groups data or info doesn't requested too long.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagsGroup.Last">
            <summary>
            Encapsulates periodSource.Last property of updatePeriod "calculator".
            It shows when data of this group was requested.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagsGroup.Min">
            <summary>
            Encapsulates periodSource.Min property of updatePeriod "calculator".
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagsGroup.Period">
            <summary>
            Encapsulates periodSource.Period property of updatePeriod "calculator".
            </summary>
        </member>
        <member name="M:RPCExp.Common.TagsGroup.Tick">
            <summary>
            Encapsulates periodSource.Tick() method of updatePeriod "calculator".
            </summary>
        </member>
        <member name="P:RPCExp.Common.IPeriodSource.IsActive">
            <summary>
            Indicates that tagGroup doesn't requested too long.
            </summary>
        </member>
        <member name="P:RPCExp.Common.IPeriodSource.Last">
            <summary>
            DateTime.Ticks of last Tick() call.
            </summary>
        </member>
        <member name="P:RPCExp.Common.IPeriodSource.Min">
            <summary>
            minimum period to limit calculated period
            </summary>
        </member>
        <member name="P:RPCExp.Common.IPeriodSource.Period">
            <summary>
            Calculated period. It should be used as period for requests values of tags in group from device.
            </summary>
        </member>
        <member name="M:RPCExp.Common.IPeriodSource.Tick">
            <summary>
            It mast be called every time when tagGroup values are requested
            </summary>
        </member>
        <member name="T:RPCExp.Common.BasicPeriodSource">
            <summary>
            This is dummy class for providing constant period.
            It uses in tagGroups of alarmLogging and tagLogging.
            </summary>
        </member>
        <member name="P:RPCExp.Common.BasicPeriodSource.IsActive">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.BasicPeriodSource.Last">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.BasicPeriodSource.Min">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.BasicPeriodSource.Period">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.Common.BasicPeriodSource.Tick">
            <inheritdoc/>
        </member>
        <member name="T:RPCExp.Common.TickPeriodSource">
            <summary>
            Calculates avg timespan between several Tick() method calls.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TickPeriodSource.Min">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.TickPeriodSource.IsActive">
            <summary>
            <inheritdoc/>
            if method Tick() was not call in 3 calculated period it returns false.
            </summary>
        </member>
        <member name="P:RPCExp.Common.TickPeriodSource.Period">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Common.TickPeriodSource.Last">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.Common.TickPeriodSource.Tick">
            <inheritdoc/>
        </member>
        <member name="T:RPCExp.Common.ValueType">
            <summary>
            represents the type of tags value.
            </summary>
        </member>
        <member name="T:RPCExp.Connections.ConnectionSourceAbstract">
            <summary>
            base class for connection sources.
            implementation should contain all connection parameters.
            </summary>
        </member>
        <member name="P:RPCExp.Connections.ConnectionSourceAbstract.ClassName">
            <summary>
            Name of the concrete class for deserialization
            </summary>
        </member>
        <member name="P:RPCExp.Connections.ConnectionSourceAbstract.Name">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Connections.ConnectionSourceAbstract.Description">
            <inheritdoc/>
        </member>
        <member name="P:RPCExp.Connections.ConnectionSourceAbstract.IsOpen">
            <summary>
            encapsulate streamResource.IsOpen
            </summary>
        </member>
        <member name="M:RPCExp.Connections.ConnectionSourceAbstract.EnshureConnected">
            <summary>
            Ensures that connection is initialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Connections.ConnectionSourceAbstract.Get">
            <summary>
            Getting streamSource.
            It also tries to open it if it's not opened yet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Connections.ConnectionSourceAbstract.TryOpen">
            <summary>
            Tries to initialize and open connection. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:RPCExp.Connections.SerialConnectionSource">
            <summary>
            Implementation of ConnectionSource for serial port connections
            </summary>
        </member>
        <member name="T:RPCExp.Connections.SerialPortStreamAdapter">
            <summary>
            An adapter for the SerialPortStream class. Useful for getting serial port access on non-Windows devices.
            </summary>
        </member>
        <member name="T:RPCExp.Connections.TcpConnectionSource">
            <summary>
            Implementation of ConnectionSource for tcp port connections
            </summary>
        </member>
        <member name="T:RPCExp.Connections.UdpConnectionSource">
            <summary>
            Implementation of ConnectionSource for udp port connections
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Entities.DeviceToTemplate">
            <summary>
            Класс для связи many2many
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Entities.ICopyFrom">
            <summary>
            Копирует все, кроме ID
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Entities.TagsToTagsGroups">
            <summary>
            Many2Many relation
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.GlobalConfig">
            <summary>
            Global configuration for entire project miscellaneous constants.
            object of this class should be serialized/deserialized into json config file.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.DbConfigFile">
            <summary>
            Db file that contains configuration for restoring store object.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.TagLogServiceDbFile">
            <summary>
            Db file which is used by TagLogging service.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.TagLogServiceCheckPeriod">
            <summary>
            Base period to check conditions to decide that tags value need to be saved
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.TagLogServiceSavePeriod">
            <summary>
            Base period for service saving function
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.TagLogServiceOnErrorWait">
            <summary>
            When TagLogging service fails this timespan will be used to wait. Needs to avoid big load on cyclic exceptions.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.TagLogServiceStoreItemsCount">
            <summary>
             count of stored values to avoid disk space overfill.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.AlarmServiceDbFile">
            <summary>
            Db file which is used by AlarmService.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.AlarmServiceCheckPeriod">
            <summary>
            Base period to check conditions of rising alarms
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.AlarmServiceSavePeriod">
            <summary>
            Base period for service saving function
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.AlarmServiceOnErrorWait">
            <summary>
            When AlarmLogging service fails this timespan will be used to wait. Needs to avoid big load on cyclic exceptions.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.AlarmServiceStoreItemsCount">
            <summary>
             count of stored values to avoid disk space overfill.
            </summary>
        </member>
        <member name="P:RPCExp.DbStore.GlobalConfig.WebSocketRpcServerHosts">
            <summary>
            host:port parameter for WebSocketRpcServers listener
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.GlobalConfigFactory">
            <summary>
            Source of global config.
            It knows how to (re)store it.
            </summary>
        </member>
        <member name="M:RPCExp.DbStore.GlobalConfigFactory.Get(System.String)">
            <summary>
            gets cached config or loads it if cache is empty.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DbStore.GlobalConfigFactory.Load(System.String)">
            <summary>
            Loads cache from storage
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DbStore.GlobalConfigFactory.Save(RPCExp.DbStore.GlobalConfig,System.String)">
            <summary>
            Saves config into storage
            </summary>
            <param name="config"></param>
            <param name="fileName"></param>
        </member>
        <member name="T:RPCExp.DbStore.Serializers.ProtocolSerializerAbstract">
            <summary>
            Класс преобразует сущности из БД в объекты программы и обратно.
            </summary>
            <typeparam name="T">Класс устройства реализующего протокол</typeparam>
        </member>
        <member name="T:RPCExp.DbStore.SqliteStoreSource">
            <summary>
            Класс сохранения конфигурации в БД и восстановления конфигурации из БД
            </summary>
        </member>
        <member name="M:RPCExp.DbStore.SqliteStoreSource.Get(System.String)">
            <summary>
            Same as Load
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DbStore.SqliteStoreSource.Load(System.String)">
            <summary>
            Loads and restores main storage
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DbStore.SqliteStoreSource.Save(RPCExp.Common.Store,System.String)">
            <summary>
            Saves storage into DB.
            it doesn't work properly, cause of templates,
            but it makes good initialization for new db.
            </summary>
            <param name="store"></param>
            <param name="target"></param>
        </member>
        <member name="T:RPCExp.DocumenationExtensions">
            <summary>
            Utility class to provide documentation for various types where available with the assembly
            </summary>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocFullName(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>
            Provides the documentation comments for a specific method
            </summary>
            <param name="methodInfo">The MethodInfo (reflection data ) of the member to find documentation for</param>
            <returns>The XML fragment describing the method</returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Provides the documentation comments for a specific member
            </summary>
            <param name="memberInfo">The MemberInfo (reflection data) or the member to find documentation for</param>
            <returns>The XML fragment describing the member</returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Returns the Xml documenation summary comment for this member
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocumentation(System.Type)">
            <summary>
            Provides the documentation comments for a specific type
            </summary>
            <param name="type">Type to find the documentation for</param>
            <returns>The XML fragment that describes the type</returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetSummary(System.Type)">
            <summary>
            Gets the summary portion of a type's documenation or returns an empty string if not available
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.XmlFromName(System.Type,System.Char,System.String)">
            <summary>
            Obtains the XML Element that describes a reflection element by searching the 
            members for a member that has a name that describes the element.
            </summary>
            <param name="type">The type or parent type, used to fetch the assembly</param>
            <param name="prefix">The prefix as seen in the name attribute in the documentation XML</param>
            <param name="name">Where relevant, the full name qualifier for the element</param>
            <returns>The member that has a name that describes the specified reflection element</returns>
        </member>
        <member name="F:RPCExp.DocumenationExtensions.Cache">
            <summary>
            A cache used to remember Xml documentation for assemblies
            </summary>
        </member>
        <member name="F:RPCExp.DocumenationExtensions.FailCache">
            <summary>
            A cache used to store failure exceptions for assembly lookups
            </summary>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.XmlFromAssembly(System.Reflection.Assembly)">
            <summary>
            Obtains the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
            <remarks>This version uses a cache to preserve the assemblies, so that 
            the XML file is not loaded and parsed on every single lookup</remarks>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.XmlFromAssemblyNonCached(System.Reflection.Assembly)">
            <summary>
            Loads and parses the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
        </member>
        <member name="T:RPCExp.Modbus.MasterSource">
            <summary>
            factory-like class that create specific modbusMaster, and store it for future use in cache.
            </summary>
        </member>
        <member name="M:RPCExp.Modbus.MasterSource.Get(ModbusBasic.IModbusFactory,RPCExp.Modbus.FrameType,RPCExp.Connections.ConnectionSourceAbstract)">
            <summary>
            Gets modbus master object from cache or create new one.
            </summary>
            <param name="factory"></param>
            <param name="frameType"></param>
            <param name="connectionSource"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.Modbus.FrameType">
            <summary>
            Tells how to format ADU
            </summary>
        </member>
        <member name="T:RPCExp.Modbus.ModbusDevice">
            <summary>
            Adapt usage Modbus protocol to DeviceAbstract
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.ModbusDevice.MaxGroupLength">
            <summary>
            Max number of registers in modbus request/response
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.ModbusDevice.MaxGroupSpareLength">
            <summary>
            Max number of unused registers that can be placed in single request, to avoid splitting it to several requests.
            > 0 can be the reason of bad communication with some devices.
            </summary>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.UpdateTypeConverters">
            <summary>
            function that updating typeConverters. It's needs to be used when byteOrder changing.
            </summary>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.GetTypeConverter(RPCExp.Common.ValueType)">
            <summary>
            If requested typeConverter doesn't exist, then update function will be called, and typeConverter will be returned or exception will be thrown.
            </summary>
            <param name="modbusValueType"></param>
            <returns></returns>
        </member>
        <member name="P:RPCExp.Modbus.ModbusDevice.SlaveId">
            <summary>
            Modbus slave identificator
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.ModbusDevice.ByteOrder">
            <summary>
            Byte order in request or response need to convert value properly
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.ModbusDevice.FrameType">
            <summary>
            Tells how to format ADU
            </summary>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.Read(System.Collections.Generic.ICollection{RPCExp.Common.TagAbstract},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.Write(System.Collections.Generic.IDictionary{RPCExp.Common.TagAbstract,System.Object})">
            <summary>
            Записать значения тегов в устройство 
            </summary>
            <param name="tagsValues"></param>
            <returns>Count of written tags</returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.ReadRegisters(RPCExp.Modbus.ModbusRegion,System.UInt16,System.UInt16)">
            <summary>
            Функция синхронного чтения
            </summary>
            <param name="region">Region</param>
            <param name="begin">Start address</param>
            <param name="length">Count of registers.</param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.WriteRegisters(System.UInt16,System.UInt16[])">
            <summary>
            Функция синхронной записи
            </summary>
            <param name="begin">Start address</param>
            <param name="data">registers.</param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.WriteAndReadRegisters(System.UInt16,System.UInt16[])">
            <summary>
            Функция синхронной записи и последующего чтения записанных значений
            </summary>
            <param name="begin">Start address</param>
            <param name="data">registers.</param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.Modbus.ModbusRegion">
            <summary>
            regions of memory for modbus device
            </summary>
        </member>
        <member name="F:RPCExp.Modbus.ModbusRegion.Coils">
            <summary>
            device logic bits (often digital outputs)
            </summary>
        </member>
        <member name="F:RPCExp.Modbus.ModbusRegion.DiscreteInputs">
            <summary>
            Digital inputs and read only device logic bits
            </summary>
        </member>
        <member name="F:RPCExp.Modbus.ModbusRegion.InputRegisters">
            <summary>
            read only registers
            </summary>
        </member>
        <member name="F:RPCExp.Modbus.ModbusRegion.HoldingRegisters">
            <summary>
            registers for reading and writing
            </summary>
        </member>
        <member name="T:RPCExp.Modbus.MTag">
            <summary>
            Modbus implementation of tag.
            Additionally contains modbus related parameters
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTag.Access">
            <summary>
            Разрешение на запись
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTag.Region">
            <summary>
            region of memory of device contains this tag
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTag.Begin">
            <summary>
            Address of first modbus register of this tag.
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTag.Length">
            <summary>
            count of registers of this tag
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTag.End">
            <summary>
            Address of last modbus register of this tag.
            </summary>
        </member>
        <member name="T:RPCExp.Modbus.MTagsCollection">
            <summary>
            Collection of modbus tags from same region of memory of device.
            It used to Slice raw unsorted collection to list of collections which can be used as modbus request
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTagsCollection.Begin">
            <summary>
            Address of first modbus register of this collection.
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTagsCollection.Length">
            <summary>
            Count of register between first and last modbus register of this collection.
            </summary>
        </member>
        <member name="P:RPCExp.Modbus.MTagsCollection.End">
            <summary>
            Address of last modbus register of this collection.
            </summary>
        </member>
        <member name="M:RPCExp.Modbus.MTagsCollection.Add(RPCExp.Modbus.MTag)">
            <summary>
            Add new tag
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RPCExp.Modbus.MTagsCollection.Remove(RPCExp.Modbus.MTag)">
            <summary>
            remove tag from collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Modbus.MTagsCollection.Slice(System.Int32,System.Int32)">
            <summary>
            Slice this collection to list of collection which can be used to create requests
            </summary>
            <param name="maxGroupLength"></param>
            <param name="maxSpareLength"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.RpcServer.Router">
            <summary>
            Registered method.
            </summary>
        </member>
        <member name="M:RPCExp.RpcServer.Router.GetMethods">
            <summary>
            Gets list of stored methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.RpcServer.Router.#ctor">
            <summary>
            ctor initialize basic access methods.
            </summary>
        </member>
        <member name="M:RPCExp.RpcServer.Router.GetDesc(System.Reflection.MethodInfo)">
            <summary>
            Gets information (comments/ summary) about stored method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.RpcServer.Router.RegisterMethods(System.Object,System.String)">
            <summary>
            registering public methods of object
            </summary>
            <param name="target"></param>
            <param name="targetName"></param>
        </member>
        <member name="M:RPCExp.RpcServer.Router.Handle(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decode JsonRequest from byte[]
            call middleware, encode results and return byte[]
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="bytesCount"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.RpcServer.Router.Handle(RPCExp.RpcServer.JsonRpc.Request)">
            <summary>
            Unpack request
            Find object, then find match method and call it.
            Then pack request and return it.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.RpcServer.RpcMethod">
            <summary>
            container to store method, its object, parameters list and other related to rpc method
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.TargetName">
            <summary>
            Access name of the object
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.MethodName">
            <summary>
            Name of the method
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.Description">
            <summary>
            some description if it is documented
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.FullMethodName">
            <summary>
            Full name contains object access name and method name concatenated by dot.
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.Target">
            <summary>
            reference to methods owner object
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.IsAsync">
            <summary>
            describe how to call this method
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.Parameters">
            <summary>
            List of parameters information
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.ReturnType">
            <summary>
            type that method should return
            </summary>
        </member>
        <member name="P:RPCExp.RpcServer.RpcMethod.ParametersLength">
            <summary>
            count of parameters
            </summary>
        </member>
        <member name="M:RPCExp.RpcServer.RpcMethod.InvokeAsync(System.Object)">
            <summary>
            Unified invoke function.
            </summary>
            <param name="parametrs"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.RpcServer.RpcMetodInfo">
            <summary>
            class to view summary information about methods
            </summary>
        </member>
        <member name="T:RPCExp.RpcServer.WebSocketRpcServer">
            <summary>
            main class to provide data
            </summary>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketRpcServer.#ctor(RPCExp.RpcServer.Router,System.String[])">
            <summary>
            ctor
            </summary>
            <param name="router">see Router description</param>
            <param name="hosts">should be localhost! and loks like new string[] { "http://localhost:8888/" }</param>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketRpcServer.SocketHandlerAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            Обработка сообщений от подключившегося клиента
            </summary>
            <param name="socket"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.RpcServer.WebSocketServerAbstract">
            <summary>
            base class for WebSocket Servers
            provide listener configuration
            </summary>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketServerAbstract.#ctor(System.String[])">
            <summary>
            ctor
            </summary>
            <param name="hosts"></param>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketServerAbstract.ServiceTaskAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketServerAbstract.SocketHandlerAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            Обработка сообщений от подключившегося клиента
            </summary>
            <param name="socket"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.TagLogger.TagLogConfig">
            <summary>
            describes when and how tags need to be archived
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.Tag">
            <summary>
            Tag reference which value will be archived
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.TagLogInfo">
            <summary>
            information about the tag
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.Hyst">
            <summary>
            Макс процент от шкалы
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.PeriodMaxSec">
            <summary>
            Максимальный период в секундах
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.PeriodMinSec">
            <summary>
            Минимальный период в секундах
            </summary>
        </member>
        <member name="M:RPCExp.TagLogger.TagLogConfig.#ctor(RPCExp.Common.TagAbstract)">
            <summary>
            ctor
            </summary>
            <param name="tag"></param>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.NeedToArcive">
            <summary>
            Property getter decide: does tag value needs to be archived now?
            if it does getter will return tag data to save into db.
            if it doesn't getter will return null
            </summary>
        </member>
        <member name="T:RPCExp.TagLogger.TagLogService">
            <summary>
            Tag logging service class
            After starting it watching 
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogService.MinMaintainPeriod">
            <summary>
            Period for maintain db. Maintain will start when save new messages into db AND this period is elapsed. 
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogService.CheckPeriod">
            <summary>
            Period for check conditions of dband or period elapsed.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogService.SavePeriod">
            <summary>
            Period for saving data into db. Data can be saved faster, if caching buffer is full.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogService.StoreItemsCount">
            <summary>
            Limit of stored items in DB
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogService.FileName">
            <summary>
            SQlite db file name
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogService.Configs">
            <summary>
            Configured tags for archiving
            </summary>
        </member>
        <member name="M:RPCExp.TagLogger.TagLogService.ServiceTaskAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:RPCExp.TagLogger.TagLogService.GetInfos">
            <summary>
            Получение информации о хранящихся в архиве переменных.
            Id этих параметров используются в запросе архивных данных.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.TagLogger.TagLogService.GetData(RPCExp.TagLogger.TagLogFilter,System.Threading.CancellationToken)">
            <summary>
            Получить архивные данные.
            </summary>
            <param name="ids">Идентификаторы параметров</param>
            <param name="tBegin">Время начала для выборки</param>
            <param name="tEnd">время окончания выборки</param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.TagLogger.TagLogFilter">
            <summary>
            Messages filter
            Every member of this class is optional.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.TBegin">
            <summary>
            Time of the begin selection.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.TEnd">
            <summary>
            Time of the end selection.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.InfoIds">
            <summary>
            List of ids of concrete tags.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.FacilityAccessNames">
            <summary>
            Select facility related archive tags.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.DeviceNames">
            <summary>
            Select archives related to device with this name
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.TagNames">
            <summary>
            Select archives data by tags names
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.Offset">
            <summary>
            Part of pagination. Sets limit offset for the resulting query.
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogFilter.Count">
            <summary>
            Part of pagination. Sets limit count for the resulting query.
            </summary>
        </member>
        <member name="T:RPCExp.TraceListeners.TraceListenerLimited">
            <summary>
            Listens Trace and debug messages from System.Diagnostics.Trace / Debug
            Stores it in limited Observable collection
            To get new messages you need to subscribe to Messages.CollectionChanged event
            </summary>
        </member>
        <member name="T:System.DictionaryExtention">
            <summary>
            Extensions methods for standard IDictionary
            </summary>
        </member>
        <member name="M:System.DictionaryExtention.AddByName``1(System.Collections.Generic.IDictionary{System.String,``0},``0)">
            <summary>
            if value class implements INameDescription, then name property can be used as key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dictionary"></param>
            <param name="item"></param>
        </member>
        <member name="T:System.ExceptionExtension">
            <summary>
            Some useful extension methods for exceptions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.ExceptionExtension.InnerMessage(System.Exception,System.Boolean)" -->
        <member name="T:System.INameDescription">
            <summary>
            For lists of entities. It describe how to store data in DB by attributes.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.LimitedObservableCollection`1">
            <summary>
            Observable collection with limited capacity.
            New elements crowd out old ones
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.LimitedObservableCollection`1.Limit">
            <summary>
            Max count of items inside the collection
            </summary>
        </member>
        <member name="M:System.Collections.Generic.LimitedObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            This method do all magic. It calling by other Add, AddRange, etc.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
    </members>
</doc>
