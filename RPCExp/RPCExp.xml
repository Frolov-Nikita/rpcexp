<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RPCExp</name>
    </assembly>
    <members>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.Condition">
            <summary>
            Условие срабатывания аварии. => формирования сообщения.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.Custom1">
            <summary>
            Значение для подстановки в текст
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.AlarmInfo">
            <summary>
            Описание аварии. Текст сообщения, категория, описание, связь с оборудованием.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.DBandRValue">
            <summary>
            Мертвая зона.
            Предназначена для фильтрации дребезга аварий.
            После срабатывания аварии возврат значения в 0 будет, если условие срабатывания не выполняется и аргументы условия отличаются на эту величину.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmConfig.IsOk">
            <summary>
            В порядке ли все псоставные части аварии.
            True - все участвующие теги прочитаны и доступны (Quality >= 192)
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmConfig.IsRized">
            <summary>
            Определяет фронт срабатывания условия
            </summary>
            <returns></returns>
        </member>
        <member name="P:RPCExp.AlarmLogger.Condition.IsOk">
            <summary>
            В порядке ли аргументы?
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.Condition.Check">
            <summary>
            Выполняется ли условие
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.Condition.InDBand(System.Decimal)">
            <summary>
            Определяет находятся ли аргументы условия внутри мертвой зоны друг друга.
            </summary>
            <param name="dband">величина мертвой зоны</param>
            <returns>true- находятся</returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.Condition.From(System.String,System.Collections.Generic.IEnumerable{RPCExp.Common.TagAbstract})">
            <summary>
            Парсинг строки условия и привязка аргументов к тегам (сохраняем ссылку)
            </summary>
            <param name="conditionString">Строка условия</param>
            <param name="tags">Список тегов из которых производится привязка</param>
            <returns>объект условия</returns>
        </member>
        <member name="T:RPCExp.AlarmLogger.Argument">
            <summary>
            Источник значения. Может быть константой или тегом.
            </summary>
        </member>
        <member name="P:RPCExp.AlarmLogger.AlarmService.Configs">
            <summary>
            Список сконфигурированных аварий.
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.InnitDB(System.Threading.CancellationToken)">
            <summary>
            Cинхронизация/инициализация категорий и AlarmInfo
            </summary>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.GetInfos">
            <summary>
            Получение списка сконфигурировных сообщений
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.GetCategories">
            <summary>
            получение списка использующихся категорий
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.AlarmLogger.AlarmService.GetAlarms(RPCExp.AlarmLogger.AlarmFilter,System.Threading.CancellationToken)">
            <summary>
            Доступ к архиву сообщений
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="T:RPCExp.AlarmLogger.AlarmFilter">
            <summary>
            Фильтр для сообщений
            </summary>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetPeriodicTagsForUpdate">
            <summary>
            Определяет список тегов требующих чтения сейчас и даиу-время следующего обновления
            </summary>
            <returns>Tuple(список тегов, время следующего обновления</returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetTagsGroups">
            <summary>
            Вывод списка групп
            </summary>
            <returns>группа со списком имен тегов входящих в эту группу</returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.PeriodicUpdate(System.Threading.CancellationToken)">
            <summary>
            Периодическое чтение тегов
            </summary>
            <param name="cancellationToken"></param>
            <returns>Время в которое нужно запустить следующую проверку</returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetGroupInfos(System.String)">
            <summary>
            Получить полное описание группы тегов
            </summary>
            <param name="groupName">Имя группы</param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetGroupValues(System.String)">
            <summary>
            Получает значения группы тегов
            </summary>
            <param name="groupName">Имя группы</param>
            <returns></returns>
            <example>
            { "jsonrpc": "2.0", "method": "f1$Plc1.GetGroupValues", "params": ["usts2"], "id": "159"}
            </example>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.GetTagsValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Получить значения нескольких тэгов
            </summary>
            <param name="tagNames">имена тэгов</param>
            <returns>значения</returns>
            <example>
            { "jsonrpc": "2.0", "method": "f1$Plc1.GetTagsValues", "params": [["DATA_95"]], "id": "159"}
            </example>
        </member>
        <member name="M:RPCExp.Common.DeviceAbstract.Write(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Запись значений.
            </summary>
            <param name="tagsValues">пара имя тега - значение</param>
            <returns>Кол-во записаных значений. Теги помеченные как "только для чтения" не будут записаны.</returns>
            <example>
            { "jsonrpc": "2.0", "method": "f1$Plc1.Write", "params": [{"UST_112":"-5"}], "id": "159"}
            </example>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Groups">
            <summary>
            Группы через которые можно опросить тег
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Scale">
            <summary>
            Необязательное масштабирование
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.Period">
            <summary>
            Период опроса определяется как минимальный период из гупп опроса
            </summary>
        </member>
        <member name="P:RPCExp.Common.TagAbstract.IsActive">
            <summary>
            Тег активен, если активна хоть одна и групп опроса тэга
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD">
            <summary>
            Плохое
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_CONFIGURATION_ERROR">
            <summary>
            Ошибка в конфигурации (например не существующий COM порт, или адрес у устройстве)
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_NOT_CONNECTED">
            <summary>
            Ошибка подключения
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_DEVICE_FAILURE">
            <summary>
            Самодиагностика устройства выдает неполадку
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_SENSOR_FAILURE">
            <summary>
            Ошибка датчика
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_LAST_KNOWN_VALUE">
            <summary>
            Ошибка связи, но количество попыток еще не исчерпано и период достоверности значения тоже
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_COMM_FAILURE">
            <summary>
            Ошибка связи
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.BAD_OUT_OF_SERVICE">
            <summary>
            Опрос отключен намеренно
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.UNCERTAIN">
            <summary>
            Вероятно не достоверное (из обрывка пакета данных)
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.GOOD">
            <summary>
            хорошее
            </summary>
        </member>
        <member name="F:RPCExp.Common.TagQuality.GOOD_LOCAL_OVERRIDE">
            <summary>
            подмененное
            </summary>
        </member>
        <member name="M:RPCExp.Common.TagsGroup.#ctor(RPCExp.Common.TagsGroup)">
            <summary>
            копирующий конструктор
            </summary>
            <param name="tagsGroupOriginal"></param>
        </member>
        <member name="T:RPCExp.Connections.SerialPortStreamAdapter">
            <summary>
            An adapter for the SerialPortStream class. Useful for getting serial port access on non-Windows devices.
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Entities.DeviceToTemplate">
            <summary>
            Класс для связи many2many
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Entities.ICopyFrom">
            <summary>
            Копирует все, кроме ID
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Entities.TagsToTagsGroups">
            <summary>
            Many2Many relartion
            </summary>
        </member>
        <member name="T:RPCExp.DbStore.Serializers.ProtocolSerializerAbstract">
            <summary>
            Класс преобразует сущности из БД в объекты программы и обратно.
            </summary>
            <typeparam name="T">Сласс устройства реализующего протокол</typeparam>
        </member>
        <member name="T:RPCExp.DbStore.SqliteStoreSource">
            <summary>
            Класс сохранения конфигурации в БД и восстановления конфигурации из БД
            </summary>
        </member>
        <member name="T:RPCExp.DocumenationExtensions">
            <summary>
            Utility class to provide documentation for various types where available with the assembly
            </summary>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocFullName(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocumentation(System.Reflection.MethodInfo)">
            <summary>
            Provides the documentation comments for a specific method
            </summary>
            <param name="methodInfo">The MethodInfo (reflection data ) of the member to find documentation for</param>
            <returns>The XML fragment describing the method</returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocumentation(System.Reflection.MemberInfo)">
            <summary>
            Provides the documentation comments for a specific member
            </summary>
            <param name="memberInfo">The MemberInfo (reflection data) or the member to find documentation for</param>
            <returns>The XML fragment describing the member</returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetSummary(System.Reflection.MemberInfo)">
            <summary>
            Returns the Xml documenation summary comment for this member
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetDocumentation(System.Type)">
            <summary>
            Provides the documentation comments for a specific type
            </summary>
            <param name="type">Type to find the documentation for</param>
            <returns>The XML fragment that describes the type</returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.GetSummary(System.Type)">
            <summary>
            Gets the summary portion of a type's documenation or returns an empty string if not available
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.XmlFromName(System.Type,System.Char,System.String)">
            <summary>
            Obtains the XML Element that describes a reflection element by searching the 
            members for a member that has a name that describes the element.
            </summary>
            <param name="type">The type or parent type, used to fetch the assembly</param>
            <param name="prefix">The prefix as seen in the name attribute in the documentation XML</param>
            <param name="name">Where relevant, the full name qualifier for the element</param>
            <returns>The member that has a name that describes the specified reflection element</returns>
        </member>
        <member name="F:RPCExp.DocumenationExtensions.Cache">
            <summary>
            A cache used to remember Xml documentation for assemblies
            </summary>
        </member>
        <member name="F:RPCExp.DocumenationExtensions.FailCache">
            <summary>
            A cache used to store failure exceptions for assembly lookups
            </summary>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.XmlFromAssembly(System.Reflection.Assembly)">
            <summary>
            Obtains the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
            <remarks>This version uses a cache to preserve the assemblies, so that 
            the XML file is not loaded and parsed on every single lookup</remarks>
        </member>
        <member name="M:RPCExp.DocumenationExtensions.XmlFromAssemblyNonCached(System.Reflection.Assembly)">
            <summary>
            Loads and parses the documentation file for the specified assembly
            </summary>
            <param name="assembly">The assembly to find the XML document for</param>
            <returns>The XML document</returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.Write(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Записать значения тегов в устройство 
            </summary>
            <param name="tagsValues"></param>
            <returns>Count of written tags</returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.ReadRegisters(RPCExp.Modbus.ModbusRegion,System.UInt16,System.UInt16)">
            <summary>
            Функция синхронного чтения
            </summary>
            <param name="region">Region</param>
            <param name="begin">Start address</param>
            <param name="length">Count of registers.</param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.WriteRegisters(System.UInt16,System.UInt16[])">
            <summary>
            Функция синхронной записи
            </summary>
            <param name="begin">Start address</param>
            <param name="data">registers.</param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.Modbus.ModbusDevice.WriteAndReadRegisters(System.UInt16,System.UInt16[])">
            <summary>
            Функция синхронной записи и последующего чтения записанных значений
            </summary>
            <param name="begin">Start address</param>
            <param name="data">registers.</param>
            <returns></returns>
        </member>
        <member name="P:RPCExp.Modbus.MTag.Access">
            <summary>
            Разрешение на запись
            </summary>
        </member>
        <member name="T:RPCExp.Properties.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:RPCExp.Properties.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:RPCExp.Properties.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketRpcServer.SocketHandlerAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            Обработка сообщений от подключившегося клиента
            </summary>
            <param name="socket"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RPCExp.RpcServer.WebSocketServerAbstract.SocketHandlerAsync(System.Net.WebSockets.WebSocket,System.Threading.CancellationToken)">
            <summary>
            Обработка сообщений от подключившегося клиента
            </summary>
            <param name="socket"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.Hyst">
            <summary>
            Макс процент от шкалы
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.PeriodMaxSec">
            <summary>
            Максимальный период в секундах
            </summary>
        </member>
        <member name="P:RPCExp.TagLogger.TagLogConfig.PeriodMinSec">
            <summary>
            Минимальный период в секундах
            </summary>
        </member>
        <member name="M:RPCExp.TagLogger.TagLogService.GetInfos">
            <summary>
            Получение информации о хранящихся в архиве переменных.
            Id этих параметров используются в запросе архивных данных.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RPCExp.TagLogger.TagLogService.GetData(RPCExp.TagLogger.TagLogFilter,System.Threading.CancellationToken)">
            <summary>
            Получить архивные данные.
            </summary>
            <param name="ids">Идентификаторы параметров</param>
            <param name="tBegin">Время начала для выборки</param>
            <param name="tEnd">время окончания выборки</param>
            <returns></returns>
        </member>
    </members>
</doc>
